@startuml

title __PLAYER's Class Diagram__\n

  namespace com.jambit.onboarding2020.tbrpg {
    namespace domain.Player {
      class com.jambit.onboarding2020.tbrpg.domain.Player.Boss {
          ~ random : Random
          - critChance : int
          - hitChance : int
          - name : String
          + Boss()
          + attack()
          + decreaseHealthState()
          + getAttackDamage()
          + getName()
      }
    }
  }
  

  namespace com.jambit.onboarding2020.tbrpg {
    namespace domain.Player {
      class com.jambit.onboarding2020.tbrpg.domain.Player.Enemy {
          ~ possibleNames : List<String>
          ~ random : Random
          - bisa : String
          - critChance : int
          - glum : String
          - hitChance : int
          - name : String
          - pika : String
          - schig : String
          + Enemy()
          + attack()
          + decreaseHealthState()
          + getAsciiArt()
          + getName()
          + getRandomName()
      }
    }
  }
  

  namespace com.jambit.onboarding2020.tbrpg {
    namespace domain.Player {
      class com.jambit.onboarding2020.tbrpg.domain.Player.EnemyDeadException {
          + EnemyDeadException()
      }
    }
  }
  

  namespace com.jambit.onboarding2020.tbrpg {
    namespace domain.Player {
      abstract class com.jambit.onboarding2020.tbrpg.domain.Player.Person {
          # attackDamage : int
          # healthState : int
          + decreaseHealthState()
          + getAttackDamage()
          + getHealthState()
          + increaseHealthState()
      }
    }
  }
  

  namespace com.jambit.onboarding2020.tbrpg {
    namespace domain.Player {
      class com.jambit.onboarding2020.tbrpg.domain.Player.Player {
          - balance : int
          - inventory : ArrayList<Item>
          {static} - playerInstance : Player
          + attack()
          + attackBoss()
          + buy()
          + decreaseHealthState()
          + equipWeapon()
          + getBalance()
          + getConsumableFromInventory()
          + getEquippedWeapon()
          + getInventory()
          + getItemFromInventory()
          {static} + getPlayerInstance()
          + getWeaponsFromInventory()
          + increaseBalance()
          + isWeaponInventoryEmpty()
          + printEquippedWeapon()
          + printInventory()
          + printWeaponsFromInventory()
          + putInInventory()
          + sell()
          + takeItemFromInventory()
          + unequipWeapon()
          - Player()
      }
    }
  }
  

  namespace com.jambit.onboarding2020.tbrpg {
    namespace domain.Player {
      class com.jambit.onboarding2020.tbrpg.domain.Player.PlayerDeadException {
          + PlayerDeadException()
      }
    }
  }
  

  com.jambit.onboarding2020.tbrpg.domain.Player.Boss -up-|> com.jambit.onboarding2020.tbrpg.domain.Player.Enemy
  com.jambit.onboarding2020.tbrpg.domain.Player.Enemy -up-|> com.jambit.onboarding2020.tbrpg.domain.Player.Person
  com.jambit.onboarding2020.tbrpg.domain.Player.Player -up-|> com.jambit.onboarding2020.tbrpg.domain.Player.Person
  com.jambit.onboarding2020.tbrpg.domain.Player.Player o-- com.jambit.onboarding2020.tbrpg.domain.Item.Weapon : equippedWeapon
  com.jambit.onboarding2020.tbrpg.domain.Player.PlayerDeadException -up-|> com.jambit.onboarding2020.tbrpg.domain.Player.EnemyDeadException


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
